#!/bin/bash

set -e -u -o pipefail

. /usr/lib/nagios-plugins-openshift/utils

usage() {
  echo "Usage: $0 [-Z] <statusdir> <cmd> [args...]"
  echo
  echo 'Parameters:'
  echo '-Z         Sleep up to 10 minutes before running command'
  echo 'statusdir  Directory for storing status'
  echo 'cmd        Command to execute'
  echo 'args...    Arguments for command'
}

if [[ "$#" < 2 ]]; then
  usage >&2
  exit 1
fi

if [[ "$1" = -Z ]]; then
  shift
  delay=600
else
  delay=
fi

statusdir="$1"; shift
cmd=( "$@" )

# Make status directory into absolute path (necessary for multilog)
if ! statusdir=$(readlink -f "$statusdir") || \
   [[ ! -d "$statusdir" ]]; then
  echo "\"$statusdir\" is not a directory" >&2
  exit 1
fi

logdir="$statusdir/log"
statusfile="$statusdir/status.txt"
lockfile="$statusdir/lock"
lock_timeout=10

if [[ -n "$delay" ]]; then
  sleep $((RANDOM % delay))
fi

exec 200>"$lockfile"

if ! flock --exclusive --timeout "$lock_timeout" 200; then
  echo "Lock \"$lockfile\" can not be acquired" >&2
  exit 1
fi

tmpdir=$(mktemp -d "$statusdir/.tmp.XXXXXXXX")
trap 'rm -rf "$tmpdir"' EXIT

if ! [[ -d "$logdir" ]]; then
  mkdir -m 0700 "$logdir"
fi

# The logs contain access tokens
chmod 0700 "$logdir"

# Redirect stdout/stderr
exec > >(multilog t n10 s$(( 1024 * 1024 )) "$logdir") 2>&1

# Write log messages to stderr (redirected to multilog) and redirect
# stderr of command to logfile
if "${cmd[@]}" --nagios-output "$tmpdir/output.txt"; then
  exitcode=0
else
  exitcode=$?
fi

{
  echo "X-Status: $exitcode"
  echo
  if [[ -e "$tmpdir/output.txt" ]]; then
    cat "$tmpdir/output.txt"
  fi
} > "$tmpdir/status.txt"

mv "$tmpdir/status.txt" "$statusfile"

exit "$exitcode"

# vim: set sw=2 sts=2 et :
