#!/usr/bin/python3

import argparse
import nagiosplugin
import requests
import itertools

from vshn_npo import constants
from vshn_npo import utils


def _bytes_to_mb(value):
  return int(round(value / (1024.0 * 1024), 0))


class _CapacityStats:
  def __init__(self, name, uom="MB"):
    self._name = name
    self._uom = uom
    self._node_size = []
    self._node_used = []
    self._node_used_percent = []

  def add(self, name_suffix, size, used):
    usedperc = int(100.0 * used / size)

    self._node_size.append(size)
    self._node_used.append(used)
    self._node_used_percent.append(usedperc)

    yield nagiosplugin.Metric("{}-{}".format(self._name, name_suffix), used,
                              uom=self._uom, min=0, max=size,
                              context=self._name)

    yield nagiosplugin.Metric("{}-percent-{}".format(self._name, name_suffix),
                              usedperc,
                              uom="%", min=0, max=100,
                              context="{}-percent".format(self._name))

  def stats(self):
    global_size = sum(self._node_size)
    global_used = sum(self._node_used)
    global_used_percent = int(100.0 * global_used / global_size)

    yield nagiosplugin.Metric("global-{}".format(self._name), global_used,
                              uom=self._uom, min=0, max=global_size,
                              context="global-{}".format(self._name))
    yield nagiosplugin.Metric("node-{}-min".format(self._name), min(self._node_used),
                              uom=self._uom, min=0,
                              context="default")
    yield nagiosplugin.Metric("node-{}-max".format(self._name), max(self._node_used),
                              uom=self._uom, min=0,
                              context="default")

    yield nagiosplugin.Metric("global-{}-percent".format(self._name), global_used_percent,
                              uom="%", min=0, max=100,
                              context="global-{}-percent".format(self._name))
    yield nagiosplugin.Metric("node-{}-percent-min".format(self._name),
                              min(self._node_used_percent),
                              uom="%", min=0,
                              context="default")
    yield nagiosplugin.Metric("node-{}-percent-max".format(self._name),
                              max(self._node_used_percent),
                              uom="%", min=0,
                              context="default")


def _FsStats(stats, suffix, data):
  # TODO: Monitor per-path space, not only globally
  allpaths = data["total"]

  availmb = _bytes_to_mb(allpaths["available_in_bytes"])
  totalmb = _bytes_to_mb(allpaths["total_in_bytes"])
  usedmb = totalmb - availmb

  yield from stats.add(suffix, totalmb, usedmb)


def _ProcessStats(suffix, data):
  cpudata = data["cpu"]

  yield nagiosplugin.Metric("process-cpu-percent-{}".format(suffix),
                            cpudata["percent"],
                            uom="%", min=0,
                            context="process-cpu-percent")


def _JvmStats(stats, suffix, data):
  memdata = data["mem"]

  heap_max_mb = _bytes_to_mb(memdata["heap_max_in_bytes"])
  heap_used_mb = _bytes_to_mb(memdata["heap_used_in_bytes"])

  yield from stats.add(suffix, heap_max_mb, heap_used_mb)

class StatsQuery(nagiosplugin.Resource):
  def __init__(self, endpoint, token, strip_hostname_prefix):
    self._endpoint = endpoint
    self._token = token
    self._strip_hostname_prefix = strip_hostname_prefix

  def probe(self):
    url = "{}/_nodes/stats/fs,jvm,process".format(self._endpoint)
    headers = {
        "Authorization": "Bearer {}".format(self._token),
        }

    response = requests.get(url, headers=headers, allow_redirects=False)
    utils.raise_for_elasticsearch_response(response)

    data = response.json()

    fs_used_stats = _CapacityStats("fs-used")
    jvm_heap_used_stats = _CapacityStats("jvm-heap-used")

    # Data structure documentation:
    # https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cluster-nodes-stats.html#fs-info
    for node in data["nodes"].values():
      # In a cluster outside OpenShift there could be more than one
      # Elasticsearch instance per host, but in OpenShift every container has
      # its own name.
      suffix = node["name"]

      for i in self._strip_hostname_prefix:
        if suffix.startswith(i):
          suffix = suffix[len(i):]
          break

      yield from _FsStats(fs_used_stats, suffix, node["fs"])
      yield from _ProcessStats(suffix, node["process"])
      yield from _JvmStats(jvm_heap_used_stats, suffix, node["jvm"])

    yield from fs_used_stats.stats()
    yield from jvm_heap_used_stats.stats()


@nagiosplugin.guarded
def main():
  parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
  utils.add_verbose_argument(parser)
  utils.add_token_arguments(parser)
  parser.add_argument("--strip-hostname-prefix", metavar="PREFIX",
                      action="append",
                      help="Strip given prefix from node names")
  parser.add_argument("--fs-used-warn", metavar="RANGE",
                      help="Warn if consumed disk space on any node is above given percentage")
  parser.add_argument("--fs-used-critical", metavar="RANGE",
                      help="Critical if consumed disk space on any node is above given percentage")
  parser.add_argument("--global-fs-used-warn", metavar="RANGE",
                      help="Warn if consumed disk space across all nodes is above given percentage")
  parser.add_argument("--global-fs-used-critical", metavar="RANGE",
                      help="Critical if consumed disk space across all nodes is above given percentage")
  parser.add_argument("--cpu-usage-warn", metavar="RANGE",
                      help="Warn if CPU usage on any node is above given percentage")
  parser.add_argument("--cpu-usage-critical", metavar="RANGE",
                      help="Critical if CPU usage on any node is above given percentage")
  parser.add_argument("--jvm-heap-used-warn", metavar="RANGE",
                      help="Warn if JVM heap usage on any node is above given percentage")
  parser.add_argument("--jvm-heap-used-critical", metavar="RANGE",
                      help="Critical if JVM heap usage on any node is above given percentage")
  parser.add_argument("--global-jvm-heap-used-warn", metavar="RANGE",
                      help="Warn if JVM heap usage across all nodes is above given percentage")
  parser.add_argument("--global-jvm-heap-used-critical", metavar="RANGE",
                      help="Critical if JVM heap usage across all nodes is above given percentage")

  parser.add_argument("--endpoint", required=True, metavar="URL",
                      help="API endpoint")

  args = parser.parse_args()

  # Workaround for https://bugs.python.org/issue16399
  if not args.strip_hostname_prefix:
    args.strip_hostname_prefix = [
      "logging-es-data-master-",
      "logging-es-",
    ]

  utils.setup_basic_logging(args.verbose)

  token = utils.extract_token_argument(args)

  checks = [
      StatsQuery(args.endpoint, token, args.strip_hostname_prefix),
      nagiosplugin.ScalarContext("global-fs-used"),
      nagiosplugin.ScalarContext("global-fs-used-percent",
                                 warning=args.global_fs_used_warn,
                                 critical=args.global_fs_used_critical),
      nagiosplugin.ScalarContext("global-jvm-heap-used"),
      nagiosplugin.ScalarContext("global-jvm-heap-used-percent",
                                 warning=args.global_jvm_heap_used_warn,
                                 critical=args.global_jvm_heap_used_critical),
      nagiosplugin.ScalarContext("fs-used"),
      nagiosplugin.ScalarContext("fs-used-percent",
                                 warning=args.fs_used_warn,
                                 critical=args.fs_used_critical),
      nagiosplugin.ScalarContext("process-cpu-percent",
                                 warning=args.cpu_usage_warn,
                                 critical=args.cpu_usage_critical),
      nagiosplugin.ScalarContext("jvm-heap-used"),
      nagiosplugin.ScalarContext("jvm-heap-used-percent",
                                 warning=args.jvm_heap_used_warn,
                                 critical=args.jvm_heap_used_critical),
      ]

  nagiosplugin.Check(*checks).main(verbose=args.verbose, timeout=None)


if __name__ == "__main__":
  main()

# vim: set sw=2 sts=2 et :
